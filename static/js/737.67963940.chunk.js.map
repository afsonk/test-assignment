{"version":3,"file":"static/js/737.67963940.chunk.js","mappings":"uOAiEA,UAtDqB,WACnB,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAoBN,IAQlD,OANAO,EAAAA,EAAAA,YAAU,WACJP,IAAaI,GACfF,GAASM,EAAAA,EAAAA,GAAuBR,MAEjC,CAACA,KAGF,SAAC,IAAD,CACES,GAAI,CAAEC,GAAI,OAAQC,QAAS,OAAQC,eAAgB,gBACnD,cAAY,eAFd,SAIGR,GACC,iCACE,UAAC,IAAD,CAAKK,GAAI,CAAEI,UAAW,UAAtB,WACE,UAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,UACGX,EAAKY,KADR,KACc,iBAAMC,MAAO,CAAEC,MAAO,WAAtB,SAAoCd,EAAKe,IAAIC,cAE3D,UAAC,IAAD,CAAYX,GAAI,CAAEY,GAAI,KAAOH,MAAM,iBAAnC,oBACMd,EAAKkB,KAAKC,KAAKC,QAAQ,GAD7B,aACsC,IAAIC,KAAe,IAAVrB,EAAKsB,IAAWC,yBAE/D,SAAC,IAAD,CAAYb,QAAQ,QAApB,UACE,gBACEc,KAAKC,EAAAA,EAAAA,GAAazB,EAAK0B,QAAQ,GAAGC,MAAM,GACxCC,IAAK5B,EAAK0B,QAAQ,GAAGG,iBAGzB,UAAC,IAAD,YACE,SAAC,IAAD,CAAYnB,QAAQ,KAApB,SAA0BV,EAAK0B,QAAQ,GAAGR,QAC1C,UAAC,IAAD,CAAYR,QAAQ,KAApB,cAA2BV,EAAK0B,QAAQ,GAAGG,YAA3C,cAGJ,UAAC,IAAD,CAAKxB,GAAI,CAAEC,GAAI,QAAf,WACE,UAAC,IAAD,CAAYI,QAAQ,KAApB,yBAAsCV,EAAKkB,KAAKY,WAAhD,YACA,UAAC,IAAD,CAAYpB,QAAQ,KAApB,uDAC6CV,EAAKkB,KAAKa,eAEvD,UAAC,IAAD,CAAYrB,QAAQ,KAApB,uBAAoCV,EAAKkB,KAAKc,SAA9C,QACA,UAAC,IAAD,CAAYtB,QAAQ,KAApB,uBAAoCV,EAAKkB,KAAKe,SAA9C,UACA,UAAC,IAAD,CAAYvB,QAAQ,KAApB,6BAA0CV,EAAKkC,KAAKC,IAApD,QACA,UAAC,IAAD,CAAYzB,QAAQ,KAApB,yBAAsCV,EAAKkC,KAAKE,MAAhD,gBAIJ,SAAC,IAAD","sources":["pages/Detailed/index.tsx"],"sourcesContent":["import { Box, Container, Typography } from '@mui/material';\r\nimport React, { FC, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { NotFound } from '../../components/Status/NotFound';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { useAppDispatch } from '../../store';\r\nimport { fetchCityWeatherByName } from '../../store/citiesSlice/requests';\r\nimport { selectItemFromStore } from '../../store/citiesSlice/selectors';\r\nimport { getItemImage } from '../../utils';\r\n\r\nconst Detailed: FC = () => {\r\n  const { cityName } = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const city = useTypedSelector(selectItemFromStore(cityName));\r\n\r\n  useEffect(() => {\r\n    if (cityName && !city) {\r\n      dispatch(fetchCityWeatherByName(cityName));\r\n    }\r\n  }, [cityName]);\r\n\r\n  return (\r\n    <Container\r\n      sx={{ mt: '20px', display: 'flex', justifyContent: 'space-around' }}\r\n      data-testid='detailedPage'\r\n    >\r\n      {city ? (\r\n        <>\r\n          <Box sx={{ textAlign: 'center' }}>\r\n            <Typography variant='h3' component='div'>\r\n              {city.name} <span style={{ color: '#f15f5f' }}>{city.sys.country}</span>\r\n            </Typography>\r\n            <Typography sx={{ mb: 1.5 }} color='text.secondary'>\r\n              {`${city.main.temp.toFixed(1)}°C`} {new Date(city.dt * 1000).toLocaleTimeString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              <img\r\n                src={getItemImage(city.weather[0].icon, true)}\r\n                alt={city.weather[0].description}\r\n              />\r\n            </Typography>\r\n            <Box>\r\n              <Typography variant='h6'>{city.weather[0].main}</Typography>\r\n              <Typography variant='h6'>({city.weather[0].description})</Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box sx={{ mt: '20px' }}>\r\n            <Typography variant='h6'>Feels like: {city.main.feels_like}°C</Typography>\r\n            <Typography variant='h6'>\r\n              Atmospheric pressure on the ground level: {city.main.grnd_level}\r\n            </Typography>\r\n            <Typography variant='h6'>Humidity: {city.main.humidity}%</Typography>\r\n            <Typography variant='h6'>Pressure: {city.main.pressure}hPa</Typography>\r\n            <Typography variant='h6'>Wind direction: {city.wind.deg}%</Typography>\r\n            <Typography variant='h6'>Wind speed: {city.wind.speed}m/s</Typography>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <NotFound />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Detailed;\r\n"],"names":["cityName","useParams","dispatch","useAppDispatch","city","useTypedSelector","selectItemFromStore","useEffect","fetchCityWeatherByName","sx","mt","display","justifyContent","textAlign","variant","component","name","style","color","sys","country","mb","main","temp","toFixed","Date","dt","toLocaleTimeString","src","getItemImage","weather","icon","alt","description","feels_like","grnd_level","humidity","pressure","wind","deg","speed"],"sourceRoot":""}